/**
* @file enc.h
* @brief Encoder driver
*
* Encoder driver for reading angle
*
* @author Lucas Tiziani
* @date 2020-12-15
*
*/

#ifndef ENC_H_
#define ENC_H_

#include "init.h"
#include "driverlib.h"
#include <stdint.h>


/* Macros */
#define ENC_NUM_CH 2                    // number of encoder channels (A,B)
#define ENC_DEG_PER_COUNT 360.0/1400.0  // deg per count
#define ENC_LPF_ORDER 20                // low-pass velocity filter order


/* Data types */
typedef struct {
    uint8_t port;               // encoder port
    uint8_t pins[ENC_NUM_CH];   // encoder pins corresponding to encoder channels
    uint8_t prevState;          // previous encoder state
    int count;                  // encoder pulse count
    float pos[2];               // (deg) wheel angle history (current and previous)
    float vel[ENC_LPF_ORDER+1];     // (deg/s) wheel angular velocity history
    float velFilt;              // (deg/s) filtered wheel angular velocity
} encoder_t;


/* Function prototypes */
void Enc_Initialize(volatile struct encStruct* enc);
void Enc_InterruptRoutine(volatile struct encStruct* enc);
void Enc_CalcAngle(volatile struct encStruct* enc);


#endif /* ENC_H_ */
