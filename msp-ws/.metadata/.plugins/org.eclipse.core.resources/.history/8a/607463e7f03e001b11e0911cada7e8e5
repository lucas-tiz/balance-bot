/*
 * control.c
 *
 *  Created on: Jul 25, 2018
 *      Author: Lucas Tiziani
 */


#include "motor.h""


void motor_VelUpdate(motor_t * motor, float vel_motor) {
    /* Motor velocity controller: PID */
    float err = vel_motor - motor->pid_vel.vel_des;
    motor->pid_vel.err_int += err;
    float err_der = err - motor->pid_vel.err_prev; // assume consistent timestep
    motor->pid_vel.err_prev = err; // set previous error to current error

    // reset integral windup
    if ((motor->velPID.errInt)*(motor->velPID.kP) > 100.0) {
        motor->velPID.errInt = 100.0/(motor->velPID.kP);
    }
    else if ((motor->velPID.errInt)*(motor->velPID.kP) < -100.0) {
        motor->velPID.errInt = -100.0/(motor->velPID.kP);
    }

    float u = -(motor->velPID.kP)*err - (motor->velPID.kI)*(motor->velPID.errInt) - (motor->velPID.kD)*errDer; // calculate raw controller input

    //impose deadzone compensation
    if (u > 0) {
        u += motor->deadZone;
    }
    else if (u < 0)  {
        u -= motor->deadZone;
    }

    // impose saturation limits
    if (u > 100.0) {
        u = 100.0;
    }
    else if (u < -100.0) {
        u = -100.0;
    }

    // impose velocity dead-band
    if (abs(motor->velPID.velDes) < 1) {
        u = 0;
    }

    int duty = (int)(MOTOR_PERIOD*(u/100.0)); // calculate motor PWM timer duty cycle

//    debugVar = u; //TODO: debug only


    // set duty cycle depending on motor direction
    if (duty >= 0) { // if duty cycle is positive, go forward
        *(motor->duty[1]) = 0;  // set backward PWM signal to zero
        *(motor->duty[0]) = duty; // set forward PWM signal to duty cycle
        LED2_Set(LED_GREEN); //TODO: for debug only
    }
    else { // if duty cycle is negative, go backward
        *(motor->duty[0]) = 0;  // set backward PWM signal to zero
        *(motor->duty[1]) = -duty; // set forward PWM signal to duty cycle
        LED2_Set(LED_RED); //TODO: for debug only
    }
}


//
//
//// stop input voltage to motor
//void stopMotorInput(void)
//{
//    MOTOR_CW_DUTY_CYCLE = 0; // set CW PWM signal to zero
//    MOTOR_CCW_DUTY_CYCLE = 0; // set CCW PWM signal to zero
//}






